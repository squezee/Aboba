
#include <iostream>
#include <string>
#include <mysql/mysql.h>

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const char* HOST = "localhost";
const char* USER = "root";
const char* PASSWORD = "7363";
const char* DATABASE = "warehouse";

MYSQL* conn;
std::string currentUserRole;

void executeSQL(const std::string& sql) {
    if (mysql_query(conn, sql.c_str())) {
        std::cerr << "–û—à–∏–±–∫–∞ MySQL: " << mysql_error(conn) << std::endl;
    }
}

void createClothingItem() {
    if (currentUserRole != "admin") {
        std::cout << "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω." << std::endl;
        return;
    }

    std::string manufacturer, article, season, name, size;
    double price;
    int quantity;

    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è: ";
    std::cin >> manufacturer;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª: ";
    std::cin >> article;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å–µ–∑–æ–Ω: ";
    std::cin >> season;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ";
    std::cin >> name;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É: ";
    std::cin >> price;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã: ";
    std::cin >> size;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ";
    std::cin >> quantity;

    std::string sql = "INSERT INTO clothing (manufacturer, article, season, name, price, size, quantity) VALUES ('" +
                      manufacturer + "', '" + article + "', '" + season + "', '" + name + "', " + std::to_string(price) +
                      ", '" + size + "', " + std::to_string(quantity) + ");";
    executeSQL(sql);

    std::cout << "–û–¥–µ–∂–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞." << std::endl;
}

void readClothing() {
    std::string sql = "SELECT * FROM clothing;";
    if (mysql_query(conn, sql.c_str())) {
        std::cerr << "–û—à–∏–±–∫–∞ MySQL: " << mysql_error(conn) << std::endl;
        return;
    }

    MYSQL_RES* result = mysql_store_result(conn);
    if (!result) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " << mysql_error(conn) << std::endl;
        return;
    }

    MYSQL_ROW row;
    std::cout << "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ–¥–µ–∂–¥—ã:" << std::endl;
    while ((row = mysql_fetch_row(result))) {
        std::cout << "–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: " << row[1] << " –ê—Ä—Ç–∏–∫—É–ª: " << row[2] << " –°–µ–∑–æ–Ω: " << row[3]
                  << " –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: " << row[4] << " –¶–µ–Ω–∞: " << row[5] << " –†–∞–∑–º–µ—Ä: " << row[6]
                  << " –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " << row[7] << std::endl;
    }

    mysql_free_result(result);
}

void findClothingByCriteria() {
    std::string article, size, season;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª: ";
    std::cin >> article;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä: ";
    std::cin >> size;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å–µ–∑–æ–Ω: ";
    std::cin >> season;

    std::string sql = "SELECT * FROM clothing WHERE article LIKE '" + article + "%' AND size = '" + size + "' AND season = '" + season + "';";
    if (mysql_query(conn, sql.c_str())) {
        std::cerr << "–û—à–∏–±–∫–∞ MySQL: " << mysql_error(conn) << std::endl;
        return;
    }

    MYSQL_RES* result = mysql_store_result(conn);
    if (!result) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " << mysql_error(conn) << std::endl;
        return;
    }

    MYSQL_ROW row;
    std::cout << "–ù–∞–π–¥–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞:" << std::endl;
    while ((row = mysql_fetch_row(result))) {
        std::cout << "–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: " << row[1] << " –ê—Ä—Ç–∏–∫—É–ª: " << row[2] << " –°–µ–∑–æ–Ω: " << row[3]
                  << " –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: " << row[4] << " –¶–µ–Ω–∞: " << row[5] << " –†–∞–∑–º–µ—Ä: " << row[6]
                  << " –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " << row[7] << std::endl;
    }

    mysql_free_result(result);
}

void loginUser() {
    std::string login, password;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ";
    std::cin >> login;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
    std::cin >> password;

    std::string sql = "SELECT role FROM users WHERE login = '" + login + "' AND password = '" + password + "';";
    if (mysql_query(conn, sql.c_str())) {
        std::cerr << "–û—à–∏–±–∫–∞ MySQL: " << mysql_error(conn) << std::endl;
        return;
    }

    MYSQL_RES* result = mysql_store_result(conn);
    if (!result) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " << mysql_error(conn) << std::endl;
        return;
    }

üåêYWG $HAGGIüíé, [17.12.2024 23:43]
MYSQL_ROW row = mysql_fetch_row(result);
    if (row) {
        currentUserRole = row[0];
        std::cout << "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í–∞—à–∞ —Ä–æ–ª—å: " << currentUserRole << std::endl;
    } else {
        std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å." << std::endl;
        currentUserRole = "";
    }

    mysql_free_result(result);
}

void menu() {
    int choice;
    do {
        std::cout << "\n–ú–µ–Ω—é:\n";
        std::cout << "1. –î–æ–±–∞–≤–∏—Ç—å –æ–¥–µ–∂–¥—É\n";
        std::cout << "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç\n";
        std::cout << "3. –ù–∞–π—Ç–∏ –æ–¥–µ–∂–¥—É –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n";
        std::cout << "0. –í—ã—Ö–æ–¥\n";
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                createClothingItem();
                break;
            case 2:
                readClothing();
                break;
            case 3:
                findClothingByCriteria();
                break;
            case 0:
                std::cout << "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã." << std::endl;
                break;
            default:
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." << std::endl;
        }
    } while (choice != 0);
}

int main() {
    conn = mysql_init(nullptr);
    if (!conn) {
        std::cerr << "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MySQL." << std::endl;
        return 1;
    }

    if (!mysql_real_connect(conn, HOST, USER, PASSWORD, DATABASE, 0, nullptr, 0)) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " << mysql_error(conn) << std::endl;
        return 1;
    }

    std::string createClothingTableSQL = 
        "CREATE TABLE IF NOT EXISTS clothing ("
        "id INT AUTO_INCREMENT PRIMARY KEY, "
        "manufacturer VARCHAR(100), "
        "article VARCHAR(50), "
        "season VARCHAR(50), "
        "name VARCHAR(100), "
        "price DOUBLE, "
        "size VARCHAR(10), "
        "quantity INT);";
    executeSQL(createClothingTableSQL);

    std::string createUsersTableSQL = 
        "CREATE TABLE IF NOT EXISTS users ("
        "id INT AUTO_INCREMENT PRIMARY KEY, "
        "login VARCHAR(50), "
        "password VARCHAR(50), "
        "role VARCHAR(10));";
    executeSQL(createUsersTableSQL);

    std::string insertAdminSQL = 
        "INSERT IGNORE INTO users (login, password, role) VALUES ('admin', 'admin', 'admin');";
    executeSQL(insertAdminSQL);

    loginUser();
    if (!currentUserRole.empty()) {
        menu();
    }

    mysql_close(conn);
    return 0;
}
